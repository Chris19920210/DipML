# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TCWordSeg', [dirname(__file__)])
        except ImportError:
            import _TCWordSeg
            return _TCWordSeg
        if fp is not None:
            try:
                _mod = imp.load_module('_TCWordSeg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _TCWordSeg = swig_import_helper()
    del swig_import_helper
else:
    import _TCWordSeg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class token_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, token_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, token_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _TCWordSeg.token_t_word_set
    __swig_getmethods__["word"] = _TCWordSeg.token_t_word_get
    if _newclass:word = _swig_property(_TCWordSeg.token_t_word_get, _TCWordSeg.token_t_word_set)
    __swig_setmethods__["pos"] = _TCWordSeg.token_t_pos_set
    __swig_getmethods__["pos"] = _TCWordSeg.token_t_pos_get
    if _newclass:pos = _swig_property(_TCWordSeg.token_t_pos_get, _TCWordSeg.token_t_pos_set)
    __swig_setmethods__["wlen"] = _TCWordSeg.token_t_wlen_set
    __swig_getmethods__["wlen"] = _TCWordSeg.token_t_wlen_get
    if _newclass:wlen = _swig_property(_TCWordSeg.token_t_wlen_get, _TCWordSeg.token_t_wlen_set)
    __swig_setmethods__["wtype"] = _TCWordSeg.token_t_wtype_set
    __swig_getmethods__["wtype"] = _TCWordSeg.token_t_wtype_get
    if _newclass:wtype = _swig_property(_TCWordSeg.token_t_wtype_get, _TCWordSeg.token_t_wtype_set)
    def __init__(self): 
        this = _TCWordSeg.new_token_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TCWordSeg.delete_token_t
    __del__ = lambda self : None;
token_t_swigregister = _TCWordSeg.token_t_swigregister
token_t_swigregister(token_t)

class comb_token_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, comb_token_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, comb_token_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _TCWordSeg.comb_token_t_word_set
    __swig_getmethods__["word"] = _TCWordSeg.comb_token_t_word_get
    if _newclass:word = _swig_property(_TCWordSeg.comb_token_t_word_get, _TCWordSeg.comb_token_t_word_set)
    __swig_setmethods__["pos"] = _TCWordSeg.comb_token_t_pos_set
    __swig_getmethods__["pos"] = _TCWordSeg.comb_token_t_pos_get
    if _newclass:pos = _swig_property(_TCWordSeg.comb_token_t_pos_get, _TCWordSeg.comb_token_t_pos_set)
    __swig_setmethods__["wlen"] = _TCWordSeg.comb_token_t_wlen_set
    __swig_getmethods__["wlen"] = _TCWordSeg.comb_token_t_wlen_get
    if _newclass:wlen = _swig_property(_TCWordSeg.comb_token_t_wlen_get, _TCWordSeg.comb_token_t_wlen_set)
    __swig_setmethods__["cls"] = _TCWordSeg.comb_token_t_cls_set
    __swig_getmethods__["cls"] = _TCWordSeg.comb_token_t_cls_get
    if _newclass:cls = _swig_property(_TCWordSeg.comb_token_t_cls_get, _TCWordSeg.comb_token_t_cls_set)
    __swig_setmethods__["sidx"] = _TCWordSeg.comb_token_t_sidx_set
    __swig_getmethods__["sidx"] = _TCWordSeg.comb_token_t_sidx_get
    if _newclass:sidx = _swig_property(_TCWordSeg.comb_token_t_sidx_get, _TCWordSeg.comb_token_t_sidx_set)
    __swig_setmethods__["eidx"] = _TCWordSeg.comb_token_t_eidx_set
    __swig_getmethods__["eidx"] = _TCWordSeg.comb_token_t_eidx_get
    if _newclass:eidx = _swig_property(_TCWordSeg.comb_token_t_eidx_get, _TCWordSeg.comb_token_t_eidx_set)
    def __init__(self): 
        this = _TCWordSeg.new_comb_token_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TCWordSeg.delete_comb_token_t
    __del__ = lambda self : None;
comb_token_t_swigregister = _TCWordSeg.comb_token_t_swigregister
comb_token_t_swigregister(comb_token_t)

class seg_tokens_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seg_tokens_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seg_tokens_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fine_grain_seg_tokens"] = _TCWordSeg.seg_tokens_t_fine_grain_seg_tokens_set
    __swig_getmethods__["fine_grain_seg_tokens"] = _TCWordSeg.seg_tokens_t_fine_grain_seg_tokens_get
    if _newclass:fine_grain_seg_tokens = _swig_property(_TCWordSeg.seg_tokens_t_fine_grain_seg_tokens_get, _TCWordSeg.seg_tokens_t_fine_grain_seg_tokens_set)
    __swig_setmethods__["fine_grain_tokens_num"] = _TCWordSeg.seg_tokens_t_fine_grain_tokens_num_set
    __swig_getmethods__["fine_grain_tokens_num"] = _TCWordSeg.seg_tokens_t_fine_grain_tokens_num_get
    if _newclass:fine_grain_tokens_num = _swig_property(_TCWordSeg.seg_tokens_t_fine_grain_tokens_num_get, _TCWordSeg.seg_tokens_t_fine_grain_tokens_num_set)
    __swig_setmethods__["thick_seg_tokens"] = _TCWordSeg.seg_tokens_t_thick_seg_tokens_set
    __swig_getmethods__["thick_seg_tokens"] = _TCWordSeg.seg_tokens_t_thick_seg_tokens_get
    if _newclass:thick_seg_tokens = _swig_property(_TCWordSeg.seg_tokens_t_thick_seg_tokens_get, _TCWordSeg.seg_tokens_t_thick_seg_tokens_set)
    __swig_setmethods__["thick_seg_tokens_num"] = _TCWordSeg.seg_tokens_t_thick_seg_tokens_num_set
    __swig_getmethods__["thick_seg_tokens_num"] = _TCWordSeg.seg_tokens_t_thick_seg_tokens_num_get
    if _newclass:thick_seg_tokens_num = _swig_property(_TCWordSeg.seg_tokens_t_thick_seg_tokens_num_get, _TCWordSeg.seg_tokens_t_thick_seg_tokens_num_set)
    __swig_setmethods__["custom_defined_tokens"] = _TCWordSeg.seg_tokens_t_custom_defined_tokens_set
    __swig_getmethods__["custom_defined_tokens"] = _TCWordSeg.seg_tokens_t_custom_defined_tokens_get
    if _newclass:custom_defined_tokens = _swig_property(_TCWordSeg.seg_tokens_t_custom_defined_tokens_get, _TCWordSeg.seg_tokens_t_custom_defined_tokens_set)
    __swig_setmethods__["custom_tokens_num"] = _TCWordSeg.seg_tokens_t_custom_tokens_num_set
    __swig_getmethods__["custom_tokens_num"] = _TCWordSeg.seg_tokens_t_custom_tokens_num_get
    if _newclass:custom_tokens_num = _swig_property(_TCWordSeg.seg_tokens_t_custom_tokens_num_get, _TCWordSeg.seg_tokens_t_custom_tokens_num_set)
    __swig_setmethods__["custom_defined_phrases"] = _TCWordSeg.seg_tokens_t_custom_defined_phrases_set
    __swig_getmethods__["custom_defined_phrases"] = _TCWordSeg.seg_tokens_t_custom_defined_phrases_get
    if _newclass:custom_defined_phrases = _swig_property(_TCWordSeg.seg_tokens_t_custom_defined_phrases_get, _TCWordSeg.seg_tokens_t_custom_defined_phrases_set)
    __swig_setmethods__["custom_phrases_num"] = _TCWordSeg.seg_tokens_t_custom_phrases_num_set
    __swig_getmethods__["custom_phrases_num"] = _TCWordSeg.seg_tokens_t_custom_phrases_num_get
    if _newclass:custom_phrases_num = _swig_property(_TCWordSeg.seg_tokens_t_custom_phrases_num_get, _TCWordSeg.seg_tokens_t_custom_phrases_num_set)
    __swig_setmethods__["synonym_tokens"] = _TCWordSeg.seg_tokens_t_synonym_tokens_set
    __swig_getmethods__["synonym_tokens"] = _TCWordSeg.seg_tokens_t_synonym_tokens_get
    if _newclass:synonym_tokens = _swig_property(_TCWordSeg.seg_tokens_t_synonym_tokens_get, _TCWordSeg.seg_tokens_t_synonym_tokens_set)
    __swig_setmethods__["synonym_tokens_num"] = _TCWordSeg.seg_tokens_t_synonym_tokens_num_set
    __swig_getmethods__["synonym_tokens_num"] = _TCWordSeg.seg_tokens_t_synonym_tokens_num_get
    if _newclass:synonym_tokens_num = _swig_property(_TCWordSeg.seg_tokens_t_synonym_tokens_num_get, _TCWordSeg.seg_tokens_t_synonym_tokens_num_set)
    def __init__(self): 
        this = _TCWordSeg.new_seg_tokens_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TCWordSeg.delete_seg_tokens_t
    __del__ = lambda self : None;
seg_tokens_t_swigregister = _TCWordSeg.seg_tokens_t_swigregister
seg_tokens_t_swigregister(seg_tokens_t)

class WP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WP, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _TCWordSeg.WP_word_set
    __swig_getmethods__["word"] = _TCWordSeg.WP_word_get
    if _newclass:word = _swig_property(_TCWordSeg.WP_word_get, _TCWordSeg.WP_word_set)
    __swig_setmethods__["pos"] = _TCWordSeg.WP_pos_set
    __swig_getmethods__["pos"] = _TCWordSeg.WP_pos_get
    if _newclass:pos = _swig_property(_TCWordSeg.WP_pos_get, _TCWordSeg.WP_pos_set)
    __swig_setmethods__["bcw"] = _TCWordSeg.WP_bcw_set
    __swig_getmethods__["bcw"] = _TCWordSeg.WP_bcw_get
    if _newclass:bcw = _swig_property(_TCWordSeg.WP_bcw_get, _TCWordSeg.WP_bcw_set)
    __swig_setmethods__["cls"] = _TCWordSeg.WP_cls_set
    __swig_getmethods__["cls"] = _TCWordSeg.WP_cls_get
    if _newclass:cls = _swig_property(_TCWordSeg.WP_cls_get, _TCWordSeg.WP_cls_set)
    def __init__(self): 
        this = _TCWordSeg.new_WP()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TCWordSeg.delete_WP
    __del__ = lambda self : None;
WP_swigregister = _TCWordSeg.WP_swigregister
WP_swigregister(WP)

class ms_word_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_word_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_word_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _TCWordSeg.ms_word_t_word_set
    __swig_getmethods__["word"] = _TCWordSeg.ms_word_t_word_get
    if _newclass:word = _swig_property(_TCWordSeg.ms_word_t_word_get, _TCWordSeg.ms_word_t_word_set)
    __swig_setmethods__["idx"] = _TCWordSeg.ms_word_t_idx_set
    __swig_getmethods__["idx"] = _TCWordSeg.ms_word_t_idx_get
    if _newclass:idx = _swig_property(_TCWordSeg.ms_word_t_idx_get, _TCWordSeg.ms_word_t_idx_set)
    def __init__(self): 
        this = _TCWordSeg.new_ms_word_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TCWordSeg.delete_ms_word_t
    __del__ = lambda self : None;
ms_word_t_swigregister = _TCWordSeg.ms_word_t_swigregister
ms_word_t_swigregister(ms_word_t)

class ms_wp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ms_wp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ms_wp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["word"] = _TCWordSeg.ms_wp_t_word_set
    __swig_getmethods__["word"] = _TCWordSeg.ms_wp_t_word_get
    if _newclass:word = _swig_property(_TCWordSeg.ms_wp_t_word_get, _TCWordSeg.ms_wp_t_word_set)
    __swig_setmethods__["pos"] = _TCWordSeg.ms_wp_t_pos_set
    __swig_getmethods__["pos"] = _TCWordSeg.ms_wp_t_pos_get
    if _newclass:pos = _swig_property(_TCWordSeg.ms_wp_t_pos_get, _TCWordSeg.ms_wp_t_pos_set)
    __swig_setmethods__["bcw"] = _TCWordSeg.ms_wp_t_bcw_set
    __swig_getmethods__["bcw"] = _TCWordSeg.ms_wp_t_bcw_get
    if _newclass:bcw = _swig_property(_TCWordSeg.ms_wp_t_bcw_get, _TCWordSeg.ms_wp_t_bcw_set)
    __swig_setmethods__["cls"] = _TCWordSeg.ms_wp_t_cls_set
    __swig_getmethods__["cls"] = _TCWordSeg.ms_wp_t_cls_get
    if _newclass:cls = _swig_property(_TCWordSeg.ms_wp_t_cls_get, _TCWordSeg.ms_wp_t_cls_set)
    __swig_setmethods__["idx"] = _TCWordSeg.ms_wp_t_idx_set
    __swig_getmethods__["idx"] = _TCWordSeg.ms_wp_t_idx_get
    if _newclass:idx = _swig_property(_TCWordSeg.ms_wp_t_idx_get, _TCWordSeg.ms_wp_t_idx_set)
    def __init__(self): 
        this = _TCWordSeg.new_ms_wp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TCWordSeg.delete_ms_wp_t
    __del__ = lambda self : None;
ms_wp_t_swigregister = _TCWordSeg.ms_wp_t_swigregister
ms_wp_t_swigregister(ms_wp_t)

OUT_WORD = _TCWordSeg.OUT_WORD
OUT_PHRASE = _TCWordSeg.OUT_PHRASE
OUT_SUBPHRASE = _TCWordSeg.OUT_SUBPHRASE
TC_ENGU = _TCWordSeg.TC_ENGU
TC_GU = _TCWordSeg.TC_GU
TC_POS = _TCWordSeg.TC_POS
TC_USR = _TCWordSeg.TC_USR
TC_S2D = _TCWordSeg.TC_S2D
TC_U2L = _TCWordSeg.TC_U2L
TC_CLS = _TCWordSeg.TC_CLS
TC_RUL = _TCWordSeg.TC_RUL
TC_CN = _TCWordSeg.TC_CN
TC_T2S = _TCWordSeg.TC_T2S
TC_PGU = _TCWordSeg.TC_PGU
TC_LGU = _TCWordSeg.TC_LGU
TC_SGU = _TCWordSeg.TC_SGU
TC_CUT = _TCWordSeg.TC_CUT
TC_TEXT = _TCWordSeg.TC_TEXT
TC_CONV = _TCWordSeg.TC_CONV
TC_WMUL = _TCWordSeg.TC_WMUL
TC_PMUL = _TCWordSeg.TC_PMUL
TC_ASC = _TCWordSeg.TC_ASC
TC_SECPOS = _TCWordSeg.TC_SECPOS
TC_GBK = _TCWordSeg.TC_GBK
TC_UTF8 = _TCWordSeg.TC_UTF8
TC_NEW_RES = _TCWordSeg.TC_NEW_RES
TC_SYN = _TCWordSeg.TC_SYN
TC_LN = _TCWordSeg.TC_LN
TC_WGU = _TCWordSeg.TC_WGU
TC_A = _TCWordSeg.TC_A
TC_AD = _TCWordSeg.TC_AD
TC_AN = _TCWordSeg.TC_AN
TC_B = _TCWordSeg.TC_B
TC_C = _TCWordSeg.TC_C
TC_D = _TCWordSeg.TC_D
TC_E = _TCWordSeg.TC_E
TC_F = _TCWordSeg.TC_F
TC_G = _TCWordSeg.TC_G
TC_H = _TCWordSeg.TC_H
TC_I = _TCWordSeg.TC_I
TC_J = _TCWordSeg.TC_J
TC_K = _TCWordSeg.TC_K
TC_L = _TCWordSeg.TC_L
TC_M = _TCWordSeg.TC_M
TC_N = _TCWordSeg.TC_N
TC_NR = _TCWordSeg.TC_NR
TC_NRF = _TCWordSeg.TC_NRF
TC_NRG = _TCWordSeg.TC_NRG
TC_NS = _TCWordSeg.TC_NS
TC_NT = _TCWordSeg.TC_NT
TC_NZ = _TCWordSeg.TC_NZ
TC_NX = _TCWordSeg.TC_NX
TC_O = _TCWordSeg.TC_O
TC_P = _TCWordSeg.TC_P
TC_Q = _TCWordSeg.TC_Q
TC_R = _TCWordSeg.TC_R
TC_S = _TCWordSeg.TC_S
TC_T = _TCWordSeg.TC_T
TC_U = _TCWordSeg.TC_U
TC_V = _TCWordSeg.TC_V
TC_VD = _TCWordSeg.TC_VD
TC_VN = _TCWordSeg.TC_VN
TC_W = _TCWordSeg.TC_W
TC_X = _TCWordSeg.TC_X
TC_Y = _TCWordSeg.TC_Y
TC_Z = _TCWordSeg.TC_Z
TC_AG = _TCWordSeg.TC_AG
TC_BG = _TCWordSeg.TC_BG
TC_DG = _TCWordSeg.TC_DG
TC_MG = _TCWordSeg.TC_MG
TC_NG = _TCWordSeg.TC_NG
TC_QG = _TCWordSeg.TC_QG
TC_RG = _TCWordSeg.TC_RG
TC_TG = _TCWordSeg.TC_TG
TC_VG = _TCWordSeg.TC_VG
TC_YG = _TCWordSeg.TC_YG
TC_ZG = _TCWordSeg.TC_ZG
TC_SOS = _TCWordSeg.TC_SOS
TC_EOS = _TCWordSeg.TC_EOS
TC_UNK = _TCWordSeg.TC_UNK
TC_WWW = _TCWordSeg.TC_WWW
TC_TELE = _TCWordSeg.TC_TELE
TC_EMAIL = _TCWordSeg.TC_EMAIL

def TCInitSeg(*args):
  return _TCWordSeg.TCInitSeg(*args)
TCInitSeg = _TCWordSeg.TCInitSeg

def TCCreateSegHandle(*args):
  return _TCWordSeg.TCCreateSegHandle(*args)
TCCreateSegHandle = _TCWordSeg.TCCreateSegHandle

def TCGetResultCnt(*args):
  return _TCWordSeg.TCGetResultCnt(*args)
TCGetResultCnt = _TCWordSeg.TCGetResultCnt

def TCGetWordAt(*args):
  return _TCWordSeg.TCGetWordAt(*args)
TCGetWordAt = _TCWordSeg.TCGetWordAt

def TCGetAt(*args):
  return _TCWordSeg.TCGetAt(*args)
TCGetAt = _TCWordSeg.TCGetAt

def TCMSGetWordAt(*args):
  return _TCWordSeg.TCMSGetWordAt(*args)
TCMSGetWordAt = _TCWordSeg.TCMSGetWordAt

def TCMSGetAt(*args):
  return _TCWordSeg.TCMSGetAt(*args)
TCMSGetAt = _TCWordSeg.TCMSGetAt

def TCGetAllSegInfo(*args):
  return _TCWordSeg.TCGetAllSegInfo(*args)
TCGetAllSegInfo = _TCWordSeg.TCGetAllSegInfo

def TCConvertWordCharsetToUTF8(*args):
  return _TCWordSeg.TCConvertWordCharsetToUTF8(*args)
TCConvertWordCharsetToUTF8 = _TCWordSeg.TCConvertWordCharsetToUTF8

def TCCloseSegHandle(*args):
  return _TCWordSeg.TCCloseSegHandle(*args)
TCCloseSegHandle = _TCWordSeg.TCCloseSegHandle

def TCUnInitSeg():
  return _TCWordSeg.TCUnInitSeg()
TCUnInitSeg = _TCWordSeg.TCUnInitSeg

def TCGetClsNum(*args):
  return _TCWordSeg.TCGetClsNum(*args)
TCGetClsNum = _TCWordSeg.TCGetClsNum

def TCGetClsAt(*args):
  return _TCWordSeg.TCGetClsAt(*args)
TCGetClsAt = _TCWordSeg.TCGetClsAt

def TCSetOutMode(*args):
  return _TCWordSeg.TCSetOutMode(*args)
TCSetOutMode = _TCWordSeg.TCSetOutMode

def TCChangeUserDict(*args):
  return _TCWordSeg.TCChangeUserDict(*args)
TCChangeUserDict = _TCWordSeg.TCChangeUserDict

def TCPosId2Str(*args):
  return _TCWordSeg.TCPosId2Str(*args)
TCPosId2Str = _TCWordSeg.TCPosId2Str

def TCSetPKUMode(*args):
  return _TCWordSeg.TCSetPKUMode(*args)
TCSetPKUMode = _TCWordSeg.TCSetPKUMode


def TCSegment(*args):
  return _TCWordSeg.TCSegment(*args)
TCSegment = _TCWordSeg.TCSegment

